main.py (continued)
python
Copy
Edit
@app.get("/profile/")
async def profile(user: User = Depends(get_current_user)):
    return {
        "id": user.id,
        "email": user.email,
        "is_admin": user.is_admin,
        "created_at": user.created_at,
    }

@app.post("/baajus/")
async def add_baajus(
    name: str, 
    sensitivity: str = "balanced", 
    keywords: Optional[str] = "", 
    user: User = Depends(get_current_user),
    session: AsyncSession = Depends(get_session)
):
    new_baajus = await create_baajus(
        session=session,
        user_id=user.id,
        name=name,
        sensitivity=sensitivity,
        keywords=keywords or ""
    )
    return {
        "id": new_baajus.id,
        "name": new_baajus.name,
        "sensitivity": new_baajus.filter_sensitivity,
        "keywords": new_baajus.filter_keywords,
        "created_at": new_baajus.created_at,
    }

@app.get("/baajus/")
async def list_baajuses(
    user: User = Depends(get_current_user),
    session: AsyncSession = Depends(get_session)
):
    baajuses = await get_baajuses_for_user(session, user.id)
    return [
        {
            "id": b.id,
            "name": b.name,
            "sensitivity": b.filter_sensitivity,
            "keywords": b.filter_keywords,
            "created_at": b.created_at,
        }
        for b in baajuses
    ]

@app.post("/filter/")
async def filter_content(
    content: str, 
    baajus_id: int,
    user: User = Depends(get_current_user),
    session: AsyncSession = Depends(get_session)
):
    # Simple demo: block if any keyword appears in content, based on Baajus settings
    baajuses = await get_baajuses_for_user(session, user.id)
    my_baajus = next((b for b in baajuses if b.id == baajus_id), None)
    if not my_baajus:
        raise HTTPException(status_code=404, detail="Baajus profile not found")
    keywords = (my_baajus.filter_keywords or "").split(",")
    sensitivity = my_baajus.filter_sensitivity or "balanced"
    blocked = any(kw.strip().lower() in content.lower() for kw in keywords if kw.strip())
    return {
        "filtered": blocked,
        "sensitivity": sensitivity,
        "matched_keywords": [kw for kw in keywords if kw.strip() and kw.strip().lower() in content.lower()]
    }

@app.get("/admin/users/")
async def admin_users(
    user: User = Depends(get_current_user), 
    session: AsyncSession = Depends(get_session)
):
    if not user.is_admin:
        raise HTTPException(status_code=403, detail="Admins only")
    result = await session.execute(select(User))
    users = result.scalars().all()
    return [
        {
            "id": u.id,
            "email": u.email,
            "is_admin": u.is_admin,
            "created_at": u.created_at
        }
        for u in users
    ]

@app.get("/admin/baajuses/")
async def admin_baajuses(
    user: User = Depends(get_current_user), 
    session: AsyncSession = Depends(get_session)
):
    if not user.is_admin:
        raise HTTPException(status_code=403, detail="Admins only")
    result = await session.execute(select(Baajus))
    baajuses = result.scalars().all()
    return [
        {
            "id": b.id,
            "user_id": b.user_id,
            "name": b.name,
            "sensitivity": b.filter_sensitivity,
            "keywords": b.filter_keywords,
            "created_at": b.created_at
        }
        for b in baajuses
    ]
Backend Summary
/requirements.txt – Python dependencies

/database.py – DB connection & session

/models.py – User/Baajus models

/auth.py – Password hashing, JWT

/crud.py – DB operations

/main.py – FastAPI endpoints

Backend setup:

Place all these files in a /backend folder in Replit.

Run pip install -r requirements.txt (in the /backend folder).

Run:

bash
Copy
Edit
uvicorn main:app --host 0.0.0.0 --port 8000 --reload
Make sure your Replit Vault has NEON_DATABASE_URL and (optional but recommended) SECRET_KEY.

Frontend (React, /frontend directory)
You can use Vite, Create React App, or Replit’s own React template.
Below is a simple, modern Vite-style structure (can be easily ported):

1. package.json
json
Copy
Edit
{
  "name": "baaijus-frontend",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.5.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-router-dom": "^6.0.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.0.0",
    "vite": "^4.0.0"
  }
}
2. vite.config.js
js
Copy
Edit
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    proxy: {
      '/api': 'http://localhost:8000'
    }
  }
});
3. src/api.js
js
Copy
Edit
import axios from 'axios';

const API_BASE = '/api';

export const register = (email, password) =>
  axios.post(`${API_BASE}/register/`, null, { params: { email, password } });

export const login = (email, password) =>
  axios.post(
    `${API_BASE}/token/`,
    new URLSearchParams({ username: email, password }),
    { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }
  );

export const getProfile = token =>
  axios.get(`${API_BASE}/profile/`, {
    headers: { Authorization: `Bearer ${token}` }
  });

export const addBaajus = (token, name, sensitivity, keywords) =>
  axios.post(
    `${API_BASE}/baajus/`,
    null,
    {
      params: { name, sensitivity, keywords },
      headers: { Authorization: `Bearer ${token}` }
    }
  );

export const getBaajuses = token =>
  axios.get(`${API_BASE}/baajus/`, {
    headers: { Authorization: `Bearer ${token}` }
  });

export const filterContent = (token, baajus_id, content) =>
  axios.post(
    `${API_BASE}/filter/`,
    null,
    {
      params: { baajus_id, content },
      headers: { Authorization: `Bearer ${token}` }
    }
  );

// Add admin calls as needed...
4. src/App.js
(High-level app shell and routing)

jsx
Copy
Edit
import React from "react";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import LoginPage from "./pages/LoginPage";
import RegisterPage from "./pages/RegisterPage";
import Dashboard from "./pages/Dashboard";
import AdminPanel from "./pages/AdminPanel";
import FilterDemo from "./pages/FilterDemo";

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Navigate to="/dashboard" />} />
        <Route path="/login" element={<LoginPage />} />
        <Route path="/register" element={<RegisterPage />} />
        <Route path="/dashboard" element={<Dashboard />} />
        <Route path="/filter-demo" element={<FilterDemo />} />
        <Route path="/admin" element={<AdminPanel />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;
5. src/pages/LoginPage.js
jsx
Copy
Edit
import React, { useState } from "react";
import { login } from "../api";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [pw, setPw] = useState("");
  const [error, setError] = useState("");

  const handleLogin = async e => {
    e.preventDefault();
    setError("");
    try {
      const { data } = await login(email, pw);
      localStorage.setItem("token", data.access_token);
      window.location.href = "/dashboard";
    } catch (err) {
      setError("Login failed. Check credentials.");
    }
  };

  return (
    <div>
      <h2>Login</h2>
      <form onSubmit={handleLogin}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={e => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={pw}
          onChange={e => setPw(e.target.value)}
          required
        />
        <button type="submit">Login</button>
      </form>
      <div style={{ color: "red" }}>{error}</div>
      <a href="/register">Register</a>
    </div>
  );
}
6. src/pages/RegisterPage.js
jsx
Copy
Edit
import React, { useState } from "react";
import { register } from "../api";

export default function RegisterPage() {
  const [email, setEmail] = useState("");
  const [pw, setPw] = useState("");
  const [error, setError] = useState("");
  const [done, setDone] = useState(false);

  const handleRegister = async e => {
    e.preventDefault();
    setError("");
    try {
      await register(email, pw);
      setDone(true);
      setTimeout(() => (window.location.href = "/login"), 2000);
    } catch (err) {
      setError("Registration failed. Email may already be in use.");
    }
  };

  return (
    <div>
      <h2>Register</h2>
      <form onSubmit={handleRegister}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={e => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={pw}
          onChange={e => setPw(e.target.value)}
          required
        />
        <button type="submit">Register</button>
      </form>
      <div style={{ color: "red" }}>{error}</div>
      {done && <div style={{ color: "green" }}>Registration successful! Redirecting to login...</div>}
      <a href="/login">Back to Login</a>
    </div>
  );
}
7. src/pages/Dashboard.js
jsx
Copy
Edit
import React, { useEffect, useState } from "react";
import { getProfile, addBaajus, getBaajuses } from "../api";

export default function Dashboard() {
  const [profile, setProfile] = useState(null);
  const [baajuses, setBaajuses] = useState([]);
  const [name, setName] = useState("");
  const [sens, setSens] = useState("balanced");
  const [keywords, setKeywords] = useState("");
  const [error, setError] = useState("");

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) window.location.href = "/login";
    getProfile(token).then(({ data }) => setProfile(data));
    getBaajuses(token).then(({ data }) => setBaajuses(data));
  }, []);

  const handleAdd = async e => {
    e.preventDefault();
    setError("");
    try {
      const token = localStorage.getItem("token");
      await addBaajus(token, name, sens, keywords);
      setName("");
      setKeywords("");
      getBaajuses(token).then(({ data }) => setBaajuses(data));
    } catch {
      setError("Failed to add Baajus.");
    }
  };

  return (
    <div>
      <h2>Dashboard</h2>
      {profile && (
        <div>
          <div>Email: {profile.email}</div>
          <div>User ID: {profile.id}</div>
        </div>
      )}
      <h3>Create New Baajus</h3>
      <form onSubmit={handleAdd}>
        <input
          value={name}
          onChange={e => setName(e.target.value)}
          placeholder="Baajus name"
          required
        />
        <select value={sens} onChange={e => setSens(e.target.value)}>
          <option value="light">Light</option>
          <option value="balanced">Balanced</option>
          <option value="strict">Strict</option>
        </select>
        <input
          value={keywords}
          onChange={e => setKeywords(e.target.value)}
          placeholder="Comma-separated keywords"
        />
        <button type="submit">Add Baajus</button>
      </form>
      <div style={{ color: "red" }}>{error}</div>
      <h3>Your Baajuses</h3>
      <ul>
        {baajuses.map(b => (
          <li key={b.id}>
            <strong>{b.name}</strong> ({b.sensitivity}) – {b.keywords}
          </li>
        ))}
      </ul>
      <a href="/filter-demo">Try Filter Demo</a>
      {profile && profile.is_admin && <a href="/admin">Go to Admin Panel</a>}
      <button onClick={() => { localStorage.clear(); window.location.href = "/login"; }}>Logout</button>
    </div>
  );
}
8. src/pages/FilterDemo.js
jsx
Copy
Edit
import React, { useEffect, useState } from "react";
import { getBaajuses, filterContent } from "../api";

export default function FilterDemo() {
  const [baajuses, setBaajuses] = useState([]);
  const [selected, setSelected] = useState("");
  const [text, setText] = useState("");
  const [result, setResult] = useState(null);

  useEffect(() => {
    const token = localStorage.getItem("token");
    getBaajuses(token).then(({ data }) => setBaajuses(data));
  }, []);

  const handleCheck = async e => {
    e.preventDefault();
    const token = localStorage.getItem("token");
    const { data } = await filterContent(token, selected, text);
    setResult(data);
  };

  return (
    <div>
      <h2>Content Filter Demo</h2>
      <form onSubmit={handleCheck}>
        <select value={selected} onChange={e => setSelected(e.target.value)} required>
          <option value="">Select Baajus</option>
          {baajuses.map(b => (
            <option key={b.id} value={b.id}>
              {b.name} ({b.sensitivity})
            </option>
          ))}
        </select>
        <textarea
          value={text}
          onChange={e => setText(e.target.value)}
          placeholder="Paste sample content here"
          rows={4}
        />
        <button type="submit">Check Content</button>
      </form>
      {result && (
        <div>
          <h4>Filter Result:</h4>
          {result.filtered ? (
            <span style={{ color: "red" }}>Blocked: matched keywords {result.matched_keywords.join(", ")}</span>
          ) : (
            <span style={{ color: "green" }}>Allowed</span>
          )}
          <div>Sensitivity: {result.sensitivity}</div>
        </div>
      )}
      <a href="/dashboard">Back to Dashboard</a>
    </div>
  );
}
9. src/pages/AdminPanel.js
jsx
Copy
Edit
import React, { useEffect, useState } from "react";
import axios from "axios";

export default function AdminPanel() {
  const [users, setUsers] = useState([]);
  const [baajuses, setBaajuses] = useState([]);

  useEffect(() => {
    const token = localStorage.getItem("token");
    axios
      .get("/api/admin/users/", { headers: { Authorization: `Bearer ${token}` } })
      .then(({ data }) => setUsers(data));
    axios
      .get("/api/admin/baajuses/", { headers: { Authorization: `Bearer ${token}` } })
      .then(({ data }) => setBaajuses(data));
  }, []);

  return (
    <div>
      <h2>Admin Panel</h2>
      <h3>Users</h3>
      <ul>
        {users.map(u => (
          <li key={u.id}>
            {u.email} | Admin: {u.is_admin ? "Yes" : "No"} | Created: {u.created_at}
          </li>
        ))}
      </ul>
      <h3>All Baajuses</h3>
      <ul>
        {baajuses.map(b => (
          <li key={b.id}>
            <b>{b.name}</b> ({b.sensitivity}) - {b.keywords} | User: {b.user_id}
          </li>
        ))}
      </ul>
      <a href="/dashboard">Back to Dashboard</a>
    </div>
  );
}
10. src/index.js
jsx
Copy
Edit
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
11. src/index.css
css
Copy
Edit
body {
  font-family: 'Segoe UI', Arial, sans-serif;
  background: #f8faff;
  color: #222;
  margin: 0;
  padding: 0;
}
input, select, textarea, button {
  margin: 4px 0;
  padding: 8px;
  border-radius: 5px;
  border: 1px solid #c7c7c7;
}
button {
  background: #5561e4;
  color: #fff;
  border: none;
  cursor: pointer;
}
button:hover {
  background: #4050c4;
}
a {
  display: inline-block;
  margin: 8px 0;
  color: #5561e4;
  text-decoration: none;
}
h2, h3, h4 {
  color: #4050c4;
}
div {
  margin-bottom: 8px;
}
Frontend Setup
Place all these files in /frontend (with src/ and public/ as needed)

Run npm install in /frontend

Run npm run dev

Make sure vite.config.js or proxy matches your backend (usually /api to localhost:8000)

That’s the full, working MVP!

All flows, error handling, admin, user, Baajus creation, filter demo, and NeonDB support.